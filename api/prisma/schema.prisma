// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CurrencyType {
  FIAT
  CRYPTO
}

model Prompt {
  id              String     @id @default(uuid())
  walletAddress   String     @map("wallet_address")
  name            String
  goal            String     @default("") 
  description     String     @default("")
  content         String     @default("")
  promptVersion   String     @default("1.0.0") @map("prompt_version")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  lastTestedDate  DateTime?  @map("last_tested_date") @default(now())
  price           Decimal    @db.Decimal(10, 2)
  
  // Relations
  promptTags      PromptTag[]
  promptAiAgents  PromptAiAgent[]
  purchases       Purchase[]
  ratings         Rating[]

  @@index([walletAddress])
  @@index([name])
  @@index([createdAt])
  @@index([price])
  @@map("prompts")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  promptTags PromptTag[]

  @@map("tags")
}

model AiAgent {
  id   Int    @id @default(autoincrement())
  name String @unique

  // Relations
  promptAiAgents PromptAiAgent[]

  @@map("ai_agents")
}

model PromptTag {
  promptId String  @map("prompt_id")
  tagId    Int     @map("tag_id")

  // Relations
  prompt Prompt  @relation(fields: [promptId], references: [id], onDelete: Cascade)
  tag    Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([promptId, tagId])
  @@map("prompt_tags")
}

model PromptAiAgent {
  promptId  String  @map("prompt_id")
  aiAgentId Int     @map("ai_agent_id")

  // Relations
  prompt  Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  aiAgent AiAgent @relation(fields: [aiAgentId], references: [id], onDelete: Cascade)

  @@id([promptId, aiAgentId])
  @@map("prompt_ai_agents")
}

model Purchase {
  id              String   @id @default(uuid())
  walletAddress   String   @map("wallet_address")
  promptId        String   @map("prompt_id")
  transactionHash String?  @map("transaction_hash")
  price           Decimal  @db.Decimal(10, 2)
  currencyId      Int      @map("currency_id")
  purchaseDate    DateTime @default(now()) @map("purchase_date")
  
  // Relations
  prompt          Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  currency        Currency @relation(fields: [currencyId], references: [id])

  @@index([walletAddress])
  @@index([promptId])
  @@index([purchaseDate])
  @@index([currencyId])
  @@map("purchases")
}

model Rating {
  id                String   @id @default(uuid())
  walletAddress     String   @map("wallet_address")
  promptId          String   @map("prompt_id")
  ratingScore       Int      @map("rating_score")
  ratingDescription String?  @map("rating_description")
  createdAt         DateTime @default(now()) @map("created_at")
  
  // Relations
  prompt            Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, walletAddress])
  @@index([walletAddress])
  @@index([promptId])
  @@index([ratingScore])
  @@map("ratings")
}

model Preference {
  walletAddress             String        @id @map("wallet_address")
  themePreference           String        @default("light") @map("theme_preference")
  notificationSettings      Json          @default("{}") @map("notification_settings")

  // Relation to Payout Settings
  payoutSettings            PayoutSetting[]

  @@map("preferences")
}

model PayoutSetting {
  id                        String        @id @default(uuid())
  walletAddress             String        @map("wallet_address")
  isActive                  Boolean       @default(false) @map("is_active") // App logic should ensure only one is true per walletAddress

  // Payout Details
  payoutType                CurrencyType  @map("payout_type") // FIAT or CRYPTO

  // FIAT Specific (if payoutType is FIAT)
  fiatPayoutAccountId       String?       @map("fiat_payout_account_id") // e.g., Stripe Account ID

  // CRYPTO Specific (if payoutType is CRYPTO)
  cryptoPayoutWalletAddress String?       @map("crypto_payout_wallet_address") // The receiving address
  payoutCurrencyId          Int?          @map("payout_currency_id")       // Which crypto currency?
  payoutNetworkChainId      Int?          @map("payout_network_chain_id")  // On which chain?

  createdAt                 DateTime      @default(now()) @map("created_at")
  updatedAt                 DateTime      @updatedAt @map("updated_at")

  // Relations
  preference                Preference    @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)
  payoutCurrency            Currency?     @relation("PayoutCurrency", fields: [payoutCurrencyId], references: [id])
  payoutNetworkChain        NetworkChain? @relation("PayoutNetwork", fields: [payoutNetworkChainId], references: [id])

  // Indexes
  @@index([walletAddress])
  @@index([isActive])
  @@index([payoutCurrencyId])
  @@index([payoutNetworkChainId])

  @@map("payout_settings")
}

model AuthNonce {
  walletAddress String   @id @map("wallet_address")
  nonce         String
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@index([nonce])
  @@map("auth_nonces")
}

model ApiKey {
  id            String    @id @default(uuid())
  key           String    @unique
  name          String
  walletAddress String    @map("wallet_address")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  expiresAt     DateTime? @map("expires_at")
  isActive      Boolean   @default(true) @map("is_active")
  lastUsedAt    DateTime? @map("last_used_at")

  @@index([key])
  @@index([walletAddress])
  @@map("api_keys")
}

model Currency {
  id     Int    @id @default(autoincrement())
  code   String @unique
  name   String
  symbol String @unique
  type   CurrencyType @default(FIAT) @map("type")

  // Relations
  purchases Purchase[]
  networkChains CurrencyNetworkChain[]
  payoutSettings PayoutSetting[] @relation("PayoutCurrency") // Updated inverse relation

  @@index([type])

  @@map("currencies")
}

model NetworkChain {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  symbol      String    // Native currency symbol (e.g., ETH, MATIC)
  chainId     Int       @unique @map("chain_id")
  rpcUrl      String?   @map("rpc_url")
  explorerUrl String?   @map("explorer_url")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relations
  currencies  CurrencyNetworkChain[]
  payoutSettings PayoutSetting[] @relation("PayoutNetwork") // Updated inverse relation

  @@map("network_chains")
}

model CurrencyNetworkChain {
  currencyId     Int     @map("currency_id")
  networkChainId Int     @map("network_chain_id")
  contractAddress String? @map("contract_address") // Nullable for native currencies

  // Relations
  currency       Currency     @relation(fields: [currencyId], references: [id], onDelete: Cascade)
  networkChain   NetworkChain @relation(fields: [networkChainId], references: [id], onDelete: Cascade)

  @@id([currencyId, networkChainId])
  @@index([contractAddress]) // Index for searching by contract address
  @@map("currency_network_chains")
} 

